{"version":3,"sources":["Container/Main/Main.js","App.js","serviceWorker.js","index.js","Container/Main/main.module.css"],"names":["Main","state","Amount","numMonths","Interest","prevAmount","prevnumMonths","monAmount","priAmount","callApi","axios","get","then","response","setState","data","monthlyPayment","principal","catch","error","console","log","this","evt","target","value","Card","bg","className","mainStyle","cardDesign","Body","style","width","Title","fontSize","color","Form","formContent","inputContent","type","name","formInput","min","max","onChange","handleAmountChange","handleDurationChange","Container","Row","Col","lg","md","sm","sliderText","amount","currency","numPayments","interestRate","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.e959c2c5.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport { Container, Row, Col, Card, Form } from 'react-bootstrap';\r\nimport mainStyle from '../Main/main.module.css';\r\n\r\nclass Main extends Component {\r\n    state = {\r\n        Amount: 500,\r\n        numMonths: 6,\r\n        Interest: '',\r\n        prevAmount: '',\r\n        prevnumMonths: '',\r\n        monAmount: {},\r\n        priAmount: {},\r\n    }\r\n\r\n    //API creation\r\n    callApi = () => {\r\n        if ((this.state.Amount !== this.state.prevAmount) || (this.state.numMonths !== this.state.prevnumMonths)) {\r\n            axios.get('https://ftl-frontend-test.herokuapp.com/interest?amount=' + this.state.Amount + '&numMonths=' + this.state.numMonths)\r\n                .then((response) => {\r\n                    this.setState({\r\n                        Interest: response.data,\r\n                        monAmount: response.data.monthlyPayment,\r\n                        priAmount: response.data.principal,\r\n                        prevAmount: this.state.Amount,\r\n                        prevnumMonths: this.state.numMonths,\r\n                    })\r\n                })\r\n                .catch(function (error) {\r\n                    console.log(error);\r\n                })\r\n        }\r\n    }\r\n\r\n    //onload data will load\r\n    componentDidMount() {\r\n        this.callApi()\r\n    }\r\n\r\n    //updated data will show\r\n    componentDidUpdate() {\r\n        this.callApi()\r\n    }\r\n\r\n    //Loan Amount Event\r\n    handleAmountChange(evt) {\r\n        this.setState({ Amount: evt.target.value, });\r\n    }\r\n\r\n    //Loan Duration Event\r\n    handleDurationChange(evt) {\r\n        this.setState({ numMonths: evt.target.value, });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {/* Card section */}\r\n                <Card bg=\"dark\" className={mainStyle.cardDesign}>\r\n                    <Card.Body style={{ width: '100%' }}>\r\n                        <Card.Title style={{ fontSize: '23px', color: '#b3b8bb' }}>Payment Calculator</Card.Title>\r\n                        <Form className={mainStyle.formContent} >\r\n\r\n                            {/* Amount Part */}\r\n                            <div className={mainStyle.inputContent}>\r\n                                <label>Loan Amount</label>\r\n                                <input type=\"range\" name=\"amount\" className={mainStyle.formInput} value={this.state.Amount} min=\"500\" max=\"5000\" onChange={(evt) => this.handleAmountChange(evt)} />\r\n                            </div>\r\n\r\n                            {/* Duration Part */}\r\n                            <div className={mainStyle.inputContent}>\r\n                                <label>Loan Duration</label>\r\n                                <input type=\"range\" name=\"duration\" className={mainStyle.formInput} value={this.state.numMonths} min=\"6\" max=\"24\" onChange={(evt) => this.handleDurationChange(evt)} />\r\n                            </div>\r\n\r\n                            {/* Rsult Part */}\r\n                            <Container>\r\n                                <Row>\r\n                                    {/* amount value and monthes value */}\r\n                                    <Col lg={7} md={7} sm={12}>\r\n                                        <div className={mainStyle.sliderText}>Amount Value: <b>{this.state.priAmount.amount} {this.state.priAmount.currency} </b></div>\r\n                                    </Col>\r\n                                    <Col lg={5} md={5} sm={12}>\r\n                                        <div className={mainStyle.sliderText}>Months: <b>{this.state.Interest.numPayments}</b></div>\r\n                                    </Col>\r\n                                </Row>\r\n                                <Row>\r\n                                    {/* interest value and payment amount */}\r\n                                    <Col lg={7} md={7} sm={12}>\r\n                                        <div className={mainStyle.sliderText}>Payment Amount: <b>{this.state.monAmount.amount} {this.state.monAmount.currency} </b></div>\r\n                                    </Col>\r\n                                    <Col lg={5} md={5} sm={12}>\r\n                                        <div className={mainStyle.sliderText}>Interest Value: <b>{this.state.Interest.interestRate}</b></div>\r\n                                    </Col>\r\n                                </Row>\r\n                            </Container>\r\n                        </Form>\r\n                    </Card.Body>\r\n                </Card>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default Main;","import React from 'react';\nimport './App.css';\nimport Main from './Container/Main/Main';\n\nconst App = () => {\n  return (\n    <div className=\"App Bg\">\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cardDesign\":\"main_cardDesign__1lz2Z\",\"formContent\":\"main_formContent__15jeC\",\"formInput\":\"main_formInput__12T0d\",\"sliderText\":\"main_sliderText__HI35V\",\"inputContent\":\"main_inputContent__lri2s\"};"],"sourceRoot":""}